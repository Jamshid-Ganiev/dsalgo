{"/datastructure/stack":{"title":"Stack","data":{"":"","stack#Stack":"Tez orada"}},"/datastructure/linkedlist":{"title":"Linked List","data":{"":"Linked List bu linear bo'lgan data structure bo'lib, elementlar xotiradan ketma-ket joylashmaydi. Buning o'rniga har bir elementlar\no'zidan keyingi elementga pointer vazifasini bajaradi ya'ni ular keyingi element xotirani qaysi qismida joylashganini biladi.Linked List ma'lumot tuzilmasi Node degan tushunchani ilg'or suradi. Har bir Nodeda ma'lumot va keyingi node uchun pointer\nya'ni narigi Nodeni manzili saqlanadi.\n\nAgar Treasure Map o'yinini o'ynagan bo'lsangiz, xaritadan xazinaga borasiz va u yerda xazina\no'rniga yana bir yo'l uchun xarita bo'ladi. Shu tariqa siz yo'llardan o'tib oxiri xazinaga borasiz. Shu anana Linked Listda ham bor.\n\nLinked Listda yana bir narsa mavjud va u head. Ha uni boshi bor )\n\nBirinchi node odatda head deyiladi va qolganlari esa oddiy nodelar bo'ladi. Oxirgi next doim null bilan tugaydi.\nKeyingi node bo'lmagani uchun ham oxirgi node null bilan tugaydi. Agar yangi node qo'shsangiz u null emas o'sha node ni\nmemory locationnini saqlab turadi.Linked Listning bir nechta turlari mavjud va ular:\nSingly Linked List\nDoubly Linked List\nCircular Linked List\n\n\nHech bir dasturlash tilida standart data type qilib Linked Listni uchratmaysiz shuning uchun ham uni o'zingiz tuzib chiqasiz.\nO'zingizga qulay dasturlash tilida bu qanday qilinishni o'rganib chiqing.","singly-linked-list#Singly Linked List":"Yuqorida keltirilgan rasmda biz aynan Singly Linked Listni keltirib o'tganmiz. U yerdagi har bir node data va next\nattributelaridan iborat. data biz bergan ma'lumotni o'zida saqlasa, next keyingi nodeni joylashuvini saqlaydi. Sizda savol\npaydo bo'lishi mumkin: \"Array bilan farqi nimada buni?\".Keling qisqacha Array va Linked Listni farqini ko'rsak. Birinchi Linked List qanday ishlashiga qarang:\n\nEndi esa Array qanday ishlashiga qarang:\n\nKo'rib turibsizki bu yerda Array ma'lumotlarni ketma-ket xotirada saqlayabdi va xotiradan ma'lumotni tezkor olish uchun\nindekslar yaratilayabdi. Indekslar shunchaki xotiraning manziliga ulangan sonlar vazifasini o'taydi. Shuning uchun ham biz arrayda\nistalgan qiymatimizga tezkor kira olamiz.Linked Listda elementlarni olish uchun esa biz har bir nodega kirishimiz va uning datasi biz qidirgan qiymatmi yo'qmi tekshirib\nchiqishimiz kerak bo'ladi.","doubly-linked-list#Doubly Linked List":"Doubly Linked List oddiy Linked Listdan farqi shundaki oddiy Linked Listni node-ida data va next bo'lsa, Doublyda 3ta\nprevious, data va next bo'ladi. Pastdagi rasmda tasvirlangan:\n\nTo'liqroq ko'rinishi esa mana bunday bo'ladi:","circular-linked-list#Circular Linked List":"Circular Linked Listning node-i odatda Singly Linked Listniki bilan bir xil bo'ladi va uning bitta o'zgacha jixati uning oxiri null\nemas balkim head bo'ladi. Xuddi rasmda keltirilganidek:\n\nBu bekorga Circular Linked List deb atalmagan, ya'ni u aylana shaklida bo'lib uning oxiri yo'q. Biroz qiyindek tuyulishi mumkin ammo\nishoning juda oson.","operatsiyalar#Operatsiyalar":"Linked List ustida amallar bajarish uchun juda ko'plab operatsiyalar mavjud:\nTraversal - biror elementni olish uchun.\nInsertion - yangi node qo'shish uchun.\nDeletion - mavjud elementni o'chirish uchun.\nSearch - biror nodeni qidirish uchun.\nReverse - teskari qilish uchun.\nSort - tartiblash uchun.\nva h.k.z.\n\n\nBularni bajarish uchun dasturlash tilini tanlab Linked List bo'limiga tushib o'rganing.\nAmaliyot uchun dasturlash tilingizni tanlang va gazini bosing..."}},"/datastructure/graph":{"title":"Graph","data":{"":"","graph#Graph":"Tez orada"}},"/datastructure/tree":{"title":"Tree","data":{"":"","tree#Tree":"Tez orada"}},"/datastructure/trie":{"title":"Trie","data":{"":"","trie#Trie":"Tez orada"}},"/datastructure/queue":{"title":"Queue","data":{"":"","queue#Queue":"Tez orada"}},"/datastructure/hashtable":{"title":"Hashtable","data":{"":"","hash-table#Hash Table":"Tez orada"}}}