{"/":{"title":"DSA.UZ","data":{"":"\"Ma'lumotlar strukturasi va Algoritmlar\" mavzusidagi tasavvurga boy va o'zbek tilidagi qo'llanma!","kirish#Kirish":"DWCE (Documentation With Code Exmpales) - Principle bo'yicha yozilgan ushbu qo'llanmada siz o'zingiz o'rganayotgan yoki biladigan dasturlash tilida Algoritmlar va Data Strukturalar qanday qo'llanilishini o'rganishingiz mumkinLoihani yozishda biz asosan 3ta \"princple\"ga amal qildik.\nWhat and Why? - X o'zi nimaligi va nima uchun kerakligi\nImagine - Xni qanday ishlashini illustratsiyalar bilan tushuntirish.\nHow - Xni dasturlash tilida kod orqali qanday ifoda qilish mumkinligi\n\nQo'llanmada ba'zi xatoliklarga yo'l qo'ygan bo'lishimiz mumkin. Shuni inobatga olib aytishim kerakki agarda xatolik topsangiz Issues bo'limida xatolik qayerdaligini aytib keting.Agar loihani qo'llab quvatlamoqchi bo'lsangiz, biz contribute uchun ochiqmiz va pull requestlarni loyiq deb topsak uni qabul qilamiz. Taklif va xatoliklarni Issues bo'limida New Issue orqali berib ketishingiz mumkin. Oldindan Rahmat üòäUnday bo'lsa boshladik üöÄ!","dasturlash-tili#Dasturlash tili":"Qo'llanmani imkon boricha universal qilishga harakat qilayabmiz. Ushbu dokumentatsiyada Python dasturlash tili ishlatilgan. Siz o'zingizga qulay dasturlash tilini Tillar ro'yxatdan tanlashingiz mumkin.Agar sizda hech qanday DSA bo'yicha tajriba yoki ko'nikma bo'lmasa, mavzularni ketma-ketlikda o'rganishni tavsiya qilamiz. Agar sizda bu ko'nikmalar bo'lsa unda o'zingizga qulay mavzuni tanlab o'sha mavzudagi darslarimizdan foydalanishingiz mumkin."}},"/datastructure/array":{"title":"Array","data":{"":"Har qanday dasturlash tilida bu nomlar boshqacha atalsada Computer Science da ularning nomi bitta bo'ladi. Python dasturlash tilida Array degan nomdagi Data Structure bo'lmasa ammo u mavjud shunchaki List nomi bilan.\nPythonda List - turli xil data typedagai ma'lumotlarni saqlab turuvchi konteyner xisoblanadi.\n\nmy_list = ['o', 'apple', 17, 3.14]\nKeling bugundan boshlab biz Array tushunchasini umumiy tarzda olsak va qachonki Array so'zi ishlatilsa biz uni Python dasturlash tilida Listligini tushuna olaylik.","creating-an-array---massiv-yaratish#Creating an array - Massiv yaratish":"names = [\"Jonh\", \"Alan\", \"Charlie\", \"George\"] # Listni qiymatlar bilan yaratish.\n\nmy_list = [] # Bo'sh list yaratish\nmy_list = list() # Bo'sh list yaratishning yana bir yo'li\n\nnumbers = list(range(1, 100)) # range() orqali 1-99 gacha sonlar listini yaratish.\n\n# Listni print qilish mumkin\nprint(names)\nprint(my_list)\nprint(numbers)\nPython Listlari ichiga biz string, integer, float, character, function va biz istagan ma'lumot turimizni kiritishimiz mumkin. Ba'zan biz List ichida List ko'rib qolishimiz ham mumkin va bu aytib o'tganimizdek List hohlagan data typedagi ma'lumotni o'z ichida saqlay oladi.\n\nUlarning ichidagi elementlarni access qilish ya'ni kirish uchun biz Indexlardan foydalanamiz. Yuqoridagi rasmda ko'rib turganingizdek sanoq 1 dan emas 0 dan boshlangan.\nXazil: Agar sizga biror dasturchi sen mening birinchi muhabbatimsan desa ishonmang. Chunki dasturlashda sanoq 0dan boshlanadi. üòâ\nQiymatlarni ammo qanday olishni tushunmagan bo'lsangiz pastdagi kodga qarang:\nnums = [3, 8, 1, 0, 5, -2, 32] # Rasmdagi list\n\nprint(nums[3]) # Array ichidan 3chi indeksdagi qiymatni oldik.","list-methods---list-metodlari#List Methods - List metodlari":"Pythonda hamma narsa object agar siz OOP ni yaxshi bilmasangiz bu tushuncha sizga biroz g'alati tuyilishi mumkin ammo hech qisi yo'q Internet to'la ma'lumot shunchaki o'rganib chiqishni hoziroq boshlang.Agar siz OOPni allaqachon bilsangiz tabriklayman demak siz method va function farqiga boradigan insonsiz. Bilamizki classlar ichida tuziladigan har qanday function bu method deb ataladi. List methodlari ham juda ko'p ammo keling bulardan ba'zilari qanday ishlashini mana bu rasm orqali ko'rsak.\n\nTepadagi rasmda ularning qanday ishlashi tasvirlangan va yaxshilab e'tibor bersangiz farqiga borish qiyin emas menimcha\nTepadagi rasmda ularning qanday ishlashi tasvirlangan va yaxshilab e'tibor bersangiz farqiga borish qiyin emas (menimcha).Ularni qanday ishlatamiz desangiz keling bir ikkita misol ko'rsak:\nls = [1, 2, 3] # ls degan list ochib oldik ichida 1,2,3 qiymatlari bor\n\n\nls.append(5) # biz hozir listimizni oxiriga 5 ni qo'shdik\n# Output: [1, 2, 3, 5]\n\n\nls.remove(2) # biz hozir 2 qiymatini listdan o'chirdik\n# Output: [1, 3, 5]\n\n\nls.pop(2) # Biz hozir 2-indeksdagi elemetni o'chirdik\n# Output: [1, 3]","slicing---kesish#Slicing - Kesish":"Tasavvur qiling sizda 100ta elementli list bor ammo sizga uni faqat 20-50 ideks oralig'idagi qiymatlari kerak. Bunday holatda sizga listdagi qiymatlarni o'chirish emas balkim shunchaki uni bo'lish kifoya qiladi.\n\nKo'rib turibsizki biz o'zimizga kerakli qismini shunchaki kiritish orqali bu narsaga erishdik va uning formulasi quyidagicha\nlist[start:stop]\n\n# start - boshlang'ich nuqta\n# step - tugash nuqtasi\n# : - oraliq belgisi\n\n# Yani start dan Y oraliqgacha qiymatlar deyilsa bo'ladi.\n\nls = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Agar sizga 4 dan 8 gacha oraliqdagi raqamlar kerak bo'lsa:\nls[3:8]\n\n# Agar sizga boshidan 6 chi qiymatgacha kerak bo'lsa start ni tashlab ketsangiz bo'ladi:\nls[:6]\n\n# Agar sizga 6 indeksdan oxirigacha bo'lgan raqamlar kerak bo'lsa step ni tashlab ketsangiz bo'ladi:\nls[6:]\n\n# Agar sizga barcha qiymatlar kerak bo'lsa start ni ham y ni ham tashlab yuborsangiz bo'ladi:\nls[:]\nKodlarni yozib mashq qiling shunda yana ham yaxshiroq tushunasiz...","step---qadam#Step - Qadam":"Siz ikki oraliqdagi qiymatlarni tanlab ham har nechtadir qadam tashlashingiz ham mumkin.\nlist[start:stop:step]\n\n# step - bu qadam\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nnums[1:8:2] # Bu 1-8 oraliqdagi qiymatlarni ol ammo ular orasida 2ta qadam tashla\n\n# Jarayon:\n# 1-qadam: Listni kesib olish:\n#\n# Listni o'zi:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# indekslari:    0  1  2  3  4  5  6  7  8  9\n#\n#\n# Kesilgan varianti: [2, 3, 4, 5, 6, 7, 8]\n#\n#\n# 2-qadam: Qadam yurish:\n#\n#          [2, 3, 4, 5, 6, 7, 8]\n#          ‚¨Ü     ‚¨Ü    ‚¨Ü    ‚¨Ü\n\n\n# Output: [2, 4, 6, 8]\n\nPythonda Array bor va uni yaratish uchun yoki tushunish uchun siz shunchaki array degan Python Standart Library ishlatishingiz kerak:\nfrom array import array\n\nnums = array('l', [1, 2, 3, 4, 5]) # l - singned long ya'ni raqamlar bor list\n\n# Qolgan amallar xuddi listdek ishlatilaveradi faqat boshqacha yaratiladi.\nAmmo biz ushbu darsda bu kutubxonani to'liq ishlatmaymiz ammo sizga list va arrayni taqqoslab ular qanday ishlatilishini ko'rsatib o'tdik. Qolgan ma'lumotlarni link orqali o'zingiz o'rganishingiz mumkin.\nhttps://docs.python.org/3/library/array.html","array-vs-list#Array vs List":"Python list juda moslashuvchan va ixtiyoriy ma'lumotlarni saqlashi mumkin, ammo ular Python arrayga qaraganda ko'proq joy ishlatadi. Har bir list pointer ichidagi pointer blokini o'z ichiga oladi va natijada biz birinchi doim memory pointer ga boramiz va undan keyin object pointerga boramiz.Shunga qaramay, listning afzalligi moslashuvchanlikda. Har bir list elementi ma'lumotlar va tur ma'lumotlarini o'z ichiga ololadigan to'liq tuzilma bo'lganligi uchun, list istalgan turdagi ma'lumotlarni o'z ichiga ololadi. Massivlar bunday moslashuvchanlikka ega emas, lekin ma'lumotlarni saqlash va boshqarish uchun ancha samaraliroq.Ikkalasi o'rtasidagi farqlar asosan yuqorida aytib o'tilgan backend ilovasi tufayli mavjud. Python-dagi massivlar xuddi C massivlari kabi amalga oshiriladi, ko'rsatgich massivning birinchi elementiga ishora qiladi, qolganlari esa xotirada yonma-yon joylashgan.","when-to-use-which---qaysi-birini-qachon-ishlatish-kerak#When to use which? - Qaysi birini qachon ishlatish kerak?":"Agar siz o'sishda va qisqartirishda vaqtdan yutmoqchi bo'lsangiz List ishlating.\nAgar sizga istalgan turdagi ma'lumotlar saqlash kerak bo'lsa Listni ishlating.\nAgar sizga xotiradan tejash va ko'p qiymatlarni saqlash kerak bo'lsa array ishlating. Array ko'p sonli ma'lumotlar ustida ammallarni ham ancha samarali bajaradi.","challenges#Challenges":"Merge Two sorted list\nFind two number that sums up to K"}},"/about":{"title":"About","data":{"":"This is the about page! This page is shown on the navbar."}},"/datastructure":{"title":"Ma'lumotlar Strukturasi","data":{"":"Agar siz \"Algoritm\" va \"Data Structure\"larni qanday tahlil (analysis) qilishni bilmasangiz, avval Big O notation bo'limini o'qib chiqishni maslahat beramiz!","data-structure-ozi-nima#Data Structure o'zi nima?":"Ma'lumotlar Strukturasi - bu ma'lumotlarga kirish va undan samarali foydalanish uchun tuziladigan ma'lumotlarni saqlash usuli desak bo'ladi. Uni konteynerga o'xshatsak bo'ladi. Turli konteynerlar turli xil usulda narsalarni ushlab turganidek ma'lumotlar strukturasi ham ma'lumotlarni biz aytgan uslubda ushlab tura oladi.Tasavvur qiling sayohatga chiqayabsiz.\n\nO'z chamadoningizga kerakli va muhim bo'lgan barcha narsani solishingiz kerak. Eng muhimi agar ulardan qaysidir birini unutsangiz, sayohat vaqti aniq qandaydir ko'ngilsizlikga uchraysiz. Nima qilasiz?\n\nYechim bor, check list tuzishingiz kerak!\n\nCheck list sizni ishingizni aniq yengillashtiradi va hech narsani unutmaganingizga ishonch beradi. Mana shu hayotiy misolda data structure aynan nima deb o'ylaysiz?Agar javobingiz Chamadon bo'lsa tabriklayman adashdingiz üòÅ. Agar Check List bo'lsa tabriklayman topdingiz. Nima uchun Check List bu yerdan Chamadon ham Data Structure ku deyishingiz aniq, ha ammo bizning muammoga yechim u emasda.Hayotdan juda ko'plab misollar keltirishimiz mumkin ammo keling qolganini sizga qoldirib sayohatimizni davom etamiz...","data-structures#Data Structures":"Biz sizga ketma-ket sayohat qilishingiz uchun manzillar tuzib qo'yganmiz. Ularni ketma-ket o'tish orqali siz ularni qanday kelib chiqishiyu, qachon ishlatish kerak kabi savollaringizga javob olasiz deb umid qilamiz.Agarda siz ro'yxatda keltirilgan barcha Data Structurelarni bilsangiz, sizni Algorithmlar mavzusidagi ajoyib qo'llanma kutib turibdi. Olg'a!"}}}